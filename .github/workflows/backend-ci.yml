name: Backend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'Cargo.toml'
      - 'rust-toolchain.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'Cargo.toml'
      - 'rust-toolchain.toml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug
  CARGO_NET_RETRY: 2
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"

jobs:
  setup:
    name: Setup Rust Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.75.0
        with:
          components: rustfmt, clippy, rust-src, rust-analyzer, llvm-tools-preview, miri
          targets: x86_64-unknown-freebsd, aarch64-unknown-freebsd

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

  code-quality:
    name: Code Quality Checks
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.75.0
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation coverage
        run: cargo doc --no-deps --all-features

      - name: Run Miri for undefined behavior checks
        run: |
          cargo miri setup
          cargo miri test --all-features

      - name: Validate dependencies
        run: |
          cargo audit
          cargo udeps
          cargo deny check

  build-and-test:
    name: Build and Test
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [debug, release]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.75.0

      - name: Build (${{ matrix.build-type }})
        run: |
          if [ "${{ matrix.build-type }}" = "release" ]; then
            cargo build --release --all-features
          else
            cargo build --all-features
          fi

      - name: Run unit tests
        run: cargo test --lib --bins -- --test-threads=4

      - name: Run integration tests
        run: cargo test --test '*' --features integration -- --test-threads=1

      - name: Run benchmarks
        run: |
          cargo bench --bench security_bench
          cargo bench --bench ml_bench

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.build-type }}
          path: target/criterion

  security-scan:
    name: Security Analysis
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.75.0

      - name: Run security audit
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Run SAST analysis
        run: |
          cargo install cargo-audit
          cargo audit --deny-warnings

      - name: Check for sensitive data exposure
        run: |
          cargo install cargo-geiger
          cargo geiger

      - name: Validate security features
        run: |
          cargo test --features security -- --test-threads=1
          cargo test --test security_tests -- --test-threads=1

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: target/security-report

  performance:
    name: Performance Validation
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.75.0

      - name: Run performance benchmarks
        run: |
          cargo bench --bench security_bench -- --warm-up-time 5 --measurement-time 30 --sample-size 100
          cargo bench --bench ml_bench -- --warm-up-time 5 --measurement-time 30 --sample-size 100

      - name: Validate performance requirements
        run: |
          ./src/backend/scripts/test.sh

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: target/criterion